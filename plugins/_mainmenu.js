const axios = require("axios");
const fs = require("fs");
const os = require("os");
const path = require("path");
const FormData = require("form-data");
const { cmd, commands } = require('../command');
const { runtime } = require('../lib/functions');
const config = require('../config');

cmd({
    pattern: "menu",
    alias: ["help", "alive"],
    desc: "Show all menu categories",
    category: "main",
    react: "‚è¨",
    filename: __filename
},
async (conn, mek, m, { from, pushname: _0x1279c5, reply }) => {
    try {
        const os = require("os");
        const uptime = process.uptime();
        const totalMem = os.totalmem() / (1024 ** 3);
        const freeMem = os.freemem() / (1024 ** 3);
        const usedMem = totalMem - freeMem;

        const version = "·¥ç…™…¥…™  ô·¥è·¥õ";
        const plugins = commands.length;
        const now = new Date();
        const time = now.toLocaleTimeString("en-US", { hour12: true, timeZone: "America/Port-au-Prince" });
        const date = now.toLocaleDateString("en-US", { timeZone: "America/Port-au-Prince" });

        const days = Math.floor(uptime / (3600 * 24));
        const hours = Math.floor((uptime % (3600 * 24)) / 3600);
        const minutes = Math.floor((uptime % 3600) / 60);
        const seconds = Math.floor(uptime % 60);
        const uptimeStr = `${days}ùêù ${hours}ùê° ${minutes}ùê¶ ${seconds}ùê¨`;

        let menuText = `‚ï≠‚ïê‚ïê„Äò„Äò *ùêåùêàùêçùêà ùêÇùêéùêÉùêÑùêë* „Äô„Äô‚ïê‚ä∑
‚îÉ‚ùç *·¥ç·¥è·¥Ö·¥á:* ${config.MODE}
‚îÉ‚ùç *·¥ò Ä·¥á“ì…™x:* [ ${config.PREFIX} ]
‚îÉ‚ùç *·¥ús·¥á Ä:* ${_0x1279c5 || "User"}
‚îÉ‚ùç *·¥ò ü·¥ú…¢…™…¥s:* ${plugins}
‚îÉ‚ùç *·¥†·¥á Äs…™·¥è…¥:* ${version}
‚îÉ‚ùç *·¥ú·¥ò·¥õ…™·¥ç·¥á:* ${uptimeStr}
‚îÉ‚ùç *·¥õ…™·¥ç·¥á …¥·¥è·¥°:* ${time}
‚îÉ‚ùç *·¥Ö·¥Ä·¥õ·¥á ·¥õ·¥è·¥Ö·¥Ä è:* ${date}
‚ï∞‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ä∑\n\n`;

        const categories = [...new Set(commands.map(cmd => cmd.category))];

        for (const category of categories) {
            const cmdsInCat = commands.filter(cmd => cmd.category === category);
            if (cmdsInCat.length === 0) continue;

            menuText += `‚ï≠‚îÅ‚îÅ‚îÅ‚îÅ „Äé *${category.toUpperCase()}* „Äè‚îÅ‚ä∑\n`;
            cmdsInCat.forEach(cmd => {
                menuText += `‚ïè‚Å†‚û≥ ${config.PREFIX} ${cmd.pattern}\n`;
            });
            menuText += `‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ä∑\n\n`;
            menuText += `> ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥Ö è ô è x ·¥Ä…¥·¥Ö è\n\n`;
            
        }

        await conn.sendMessage(from, {
            image: { url: `https://files.catbox.moe/06cgye.jpg` },
            caption: menuText.trim()
        }, { quoted: mek });

        await conn.sendMessage(from, {
            react: { text: "‚úÖ", key: m.key }
        });

    } catch (e) {
        console.error(e);
        reply("Error while generating menu:\n" + e.toString());
    }
});
