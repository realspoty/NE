const fs = require("fs");
const path = require("path");
const { cmd } = require("../command");

const OWNER_PATH = path.join(__dirname, "../lib/sudo.json");

// Cr√©er le fichier sudo.json si inexistant
const ensureOwnerFile = () => {
  if (!fs.existsSync(OWNER_PATH)) {
    fs.writeFileSync(OWNER_PATH, JSON.stringify([]));
  }
};
ensureOwnerFile();

// üîß Utilitaire pour lire/√©crire le fichier owner
const getOwners = () => JSON.parse(fs.readFileSync(OWNER_PATH, "utf-8"));
const saveOwners = (owners) => fs.writeFileSync(OWNER_PATH, JSON.stringify([...new Set(owners)], null, 2));

const getTargetUser = (m, args) => {
  const raw =
    m.mentionedJid?.[0] ||
    m.quoted?.sender ||
    (args[0]?.replace(/[^0-9]/g, "") || null);

  if (!raw) return null;
  return raw.endsWith("@s.whatsapp.net") ? raw : raw + "@s.whatsapp.net";
};

// üìå setsudo: Ajouter un owner temporaire
cmd({
  pattern: "setsudo",
  alias: ["addsudo", "addowner"],
  desc: "Add a temporary owner",
  category: "owner",
  react: "üòá",
  filename: __filename
}, async (conn, mek, m, { from, args, isCreator, reply }) => {
  if (!isCreator) return reply("_‚ùó ·¥è…¥ ü è ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö._");

  const target = getTargetUser(m, args);
  if (!target) return reply("‚ùå ·¥ò ü·¥á·¥Äs·¥á ·¥õ·¥Ä…¢,  Ä·¥á·¥ò ü è ·¥è Ä ·¥á…¥·¥õ·¥á Ä ·¥Ä ·¥†·¥Ä ü…™·¥Ö …¥·¥ú·¥ç ô·¥á Ä.");

  const owners = getOwners();
  if (owners.includes(target)) {
    return reply("‚ö†Ô∏è ·¥õ ú…™s ·¥ús·¥á Ä …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ä s·¥ú·¥Ö·¥è ·¥è·¥°…¥·¥á Ä.");
  }

  saveOwners([...owners, target]);

  await conn.sendMessage(from, {
    image: { url: "https://files.catbox.moe/2r9wy7.jpg"},
    caption: `‚úÖ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö @${target.replace(/@s\.whatsapp\.net$/, "")} ·¥Äs s·¥ú·¥Ö·¥è ·¥è·¥°…¥·¥á Ä.`,
    mentions: [target]
  }, { quoted: mek });
});

// üìå delsudo: Supprimer un owner temporaire
cmd({
  pattern: "delsudo",
  alias: ["delowner", "deletesudo"],
  desc: "Remove a temporary owner",
  category: "owner",
  react: "ü´©",
  filename: __filename
}, async (conn, mek, m, { from, args, isCreator, reply }) => {
  if (!isCreator) return reply("_‚ùó ·¥è…¥ ü è ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö._");

  const target = getTargetUser(m, args);
  if (!target) return reply("‚ùå ·¥ò ü·¥á·¥Äs·¥á ·¥õ·¥Ä…¢,  Ä·¥á·¥ò ü è ·¥è Ä ·¥á…¥·¥õ·¥á Ä ·¥Ä ·¥†·¥Ä ü…™·¥Ö …¥·¥ú·¥ç ô·¥á Ä.");

  const owners = getOwners();
  if (!owners.includes(target)) {
    return reply("‚ö†Ô∏è ·¥õ ú…™s ·¥ús·¥á Ä …™s …¥·¥è·¥õ ·¥Ä s·¥ú·¥Ö·¥è ·¥è·¥°…¥·¥á Ä.");
  }

  saveOwners(owners.filter(x => x !== target));

  await conn.sendMessage(from, {
    image: { url: "https://files.catbox.moe/2r9wy7.jpg" },
    caption: `‚úÖ  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö @${target.replace(/@s\.whatsapp\.net$/, "")} “ì Ä·¥è·¥ç s·¥ú·¥Ö·¥è ·¥è·¥°…¥·¥á Äs.`,
    mentions: [target]
  }, { quoted: mek });
});

// üìå listsudo: Liste des owners temporaires
cmd({
  pattern: "getsudo",
  alias: ["listowner"],
  desc: " ü…™s·¥õ ·¥Ä ü ü ·¥õ·¥á·¥ç·¥ò·¥è Ä·¥Ä Ä è ·¥è·¥°…¥·¥á Äs",
  category: "owner",
  react: "üìã",
  filename: __filename
}, async (conn, mek, m, { from, isCreator, reply }) => {
  if (!isCreator) return reply("_‚ùó ·¥è…¥ ü è ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö._");

  const owners = getOwners();

  if (owners.length === 0) {
    return reply("üì≠ …¥·¥è s·¥ú·¥Ö·¥è ·¥è·¥°…¥·¥á Äs “ì·¥è·¥ú…¥·¥Ö.");
  }

  const list = owners.map((id, i) => `${i + 1}. @${id.replace(/@s\.whatsapp\.net$/, "")}`).join("\n");

  await conn.sendMessage(from, {
    image: { url: "https://files.catbox.moe/2r9wy7.jpg" },
    caption: `ü§¥ * ü…™s·¥õ ·¥è“ì s·¥ú·¥Ö·¥è ·¥è·¥°…¥·¥á Äs:*\n\n${list}`,
    mentions: owners
  }, { quoted: mek });
});
