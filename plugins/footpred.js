const { cmd } = require('../command');
const axios = require('axios');

// API Configuration
const API_KEY = 'da971cd23296425abb66293e6c8760f5';
const API_BASE_URL = 'https://api.football-data.org/v4/';

// Competitions Mapping
const competitions = {
    'CL': 'CL',   // Champions League
    'BL': 'BL1',  // Bundesliga
    'L1': 'FL1',  // Ligue 1
    'PD': 'PD',   // La Liga
    'SA': 'SA',   // Serie A
    'PL': 'PL'    // Premier League
};

cmd({
    pattern: "footpred",
    alias: ["match", "footpred"],
    desc: "[·¥ú·¥ò·¥Ñ·¥è·¥ç…™…¥…¢ “ì·¥è·¥è·¥õ ô·¥Ä ü ü ·¥ò Ä·¥á·¥Ö…™·¥Ñ·¥õ…™·¥è…¥s]",
    category: "sport",
    filename: __filename,
}, async (conn, mek, m, { from, sender, reply, isGroup, args }) => {
    try {
        const input = args[0]?.toUpperCase();
        
        // Check competition
        if (!input || !competitions[input]) {
            return reply(`‚ö†Ô∏è ·¥ò ü·¥á·¥Äs·¥á s·¥ò·¥á·¥Ñ…™“ì è ·¥Ä ·¥†·¥Ä ü…™·¥Ö ·¥Ñ·¥è·¥ç·¥ò·¥á·¥õ…™·¥õ…™·¥è…¥:\n\n` +
                `‚Ä¢ *·¥Ñ ü* - ·¥Ñ ú·¥Ä·¥ç·¥ò…™·¥è…¥s  ü·¥á·¥Ä…¢·¥ú·¥á\n` +
                `‚Ä¢ * ô ü* -  ô·¥ú…¥·¥Ö·¥ás ü…™…¢·¥Ä\n` +
                `‚Ä¢ * ü1* -  ü…™…¢·¥ú·¥á 1\n` +
                `‚Ä¢ *·¥ò·¥Ö* -  ü·¥Ä  ü…™…¢·¥Ä\n` +
                `‚Ä¢ *s·¥Ä* - s·¥á Ä…™·¥á ·¥Ä\n` +
                `‚Ä¢ *·¥ò ü* - ·¥ò Ä·¥á·¥ç…™·¥á Ä  ü·¥á·¥Ä…¢·¥ú·¥á\n\n` +
                `·¥áx·¥Ä·¥ç·¥ò ü·¥á: .prediction PL`);
        }

        const competitionCode = competitions[input];
        const today = new Date();
        const nextWeek = new Date();
        nextWeek.setDate(today.getDate() + 7);

        // Fetch matches
        const matchesResponse = await axios.get(`${API_BASE_URL}competitions/${competitionCode}/matches`, {
            headers: { 'X-Auth-Token': API_KEY },
            params: {
                dateFrom: formatDate(today),
                dateTo: formatDate(nextWeek)
            }
        });

        const matches = matchesResponse.data.matches;

        if (!matches || matches.length === 0) {
            return reply(`‚õî …¥·¥è ·¥ç·¥Ä·¥õ·¥Ñ ú·¥ás s·¥Ñ ú·¥á·¥Ö·¥ú ü·¥á·¥Ö ·¥õ ú…™s ·¥°·¥á·¥á·¥ã …™…¥ ${getCompetitionName(input)}.`);
        }

        // Build message
        let message = `üîÆ *${getCompetitionName(input).toUpperCase()} ·¥ò Ä·¥á·¥Ö…™·¥Ñ·¥õ…™·¥è…¥s*\n\n` +
                      `üì¢ …¥·¥è·¥õ·¥á: ·¥õ ú·¥ás·¥á ·¥ò Ä·¥á·¥Ö…™·¥Ñ·¥õ…™·¥è…¥s ·¥Ä Ä·¥á  ô·¥Äs·¥á·¥Ö ·¥è…¥ s·¥õ·¥Ä·¥õ…™s·¥õ…™·¥Ñs ·¥Ä…¥·¥Ö ·¥Ä ü…¢·¥è Ä…™·¥õ ú·¥çs\n` +
                      `·¥õ ú·¥á è ·¥Ö·¥è …¥·¥è·¥õ …¢·¥ú·¥Ä Ä·¥Ä…¥·¥õ·¥á·¥á ·¥Ä·¥Ñ·¥Ñ·¥ú Ä·¥Ä·¥Ñ è.  ô·¥á·¥õ ·¥°…™s·¥á ü è!\n\n`;
        
        for (const match of matches) {
            if (match.status !== 'SCHEDULED') continue;
            
            const matchDate = new Date(match.utcDate);
            const dateStr = matchDate.toLocaleDateString('en-GB');
            const timeStr = matchDate.toLocaleTimeString('en-GB', { hour: '2-digit', minute: '2-digit' });
            
            const homeTeam = match.homeTeam.shortName || match.homeTeam.name;
            const awayTeam = match.awayTeam.shortName || match.awayTeam.name;
            
            // Get team stats
            const [homeStats, awayStats] = await Promise.all([
                getTeamStats(match.homeTeam.id),
                getTeamStats(match.awayTeam.id)
            ]);
            
            // Calculate prediction
            const prediction = calculatePrediction(homeStats, awayStats);
            
            message += `‚ñ´Ô∏è *${homeTeam} üÜö ${awayTeam}*\n` +
                      `üìÖ ${dateStr} ‚è∞ ${timeStr}\n` +
                      `üè† “ì·¥è Ä·¥ç: ${homeStats.form} | üè≥Ô∏è “ì·¥è Ä·¥ç: ${awayStats.form}\n` +
                      `üìä ·¥ò Ä·¥á·¥Ö…™·¥Ñ·¥õ…™·¥è…¥: ${prediction.result} (${prediction.probability}%)\n` +
                      `‚öΩ  ü…™·¥ã·¥á ü è s·¥Ñ·¥è Ä·¥á: ${prediction.score}\n` +
                      `üí° ·¥õ…™·¥ò: ${prediction.advice}\n\n`;
        }

        message += `\nüìà ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è s·¥ò·¥è·¥õ è ·¥ç·¥õ“ì`;
        await reply(message);

    } catch (error) {
        console.error('Error:', error.response?.data || error.message);
        reply('‚ùå ·¥á Ä Ä·¥è Ä …¢·¥á…¥·¥á Ä·¥Ä·¥õ…™…¥…¢ ·¥ò Ä·¥á·¥Ö…™·¥Ñ·¥õ…™·¥è…¥s. ·¥ò ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥  ü·¥Ä·¥õ·¥á Ä.');
    }
});

// Get team statistics
async function getTeamStats(teamId) {
    const response = await axios.get(`${API_BASE_URL}teams/${teamId}`, {
        headers: { 'X-Auth-Token': API_KEY }
    });
    
    return {
        form: response.data.form || '-----',
        wins: response.data.runningCompetitions[0]?.stats?.wins || 0,
        draws: response.data.runningCompetitions[0]?.stats?.draws || 0,
        losses: response.data.runningCompetitions[0]?.stats?.losses || 0,
        goalsFor: response.data.runningCompetitions[0]?.stats?.goalsFor || 0,
        goalsAgainst: response.data.runningCompetitions[0]?.stats?.goalsAgainst || 0
    };
}

// Prediction algorithm
function calculatePrediction(homeTeam, awayTeam) {
    // Home advantage
    const homeAdvantage = 15;
    
    // Base probabilities
    const homeWinProb = Math.min(70, homeAdvantage + (homeTeam.wins - awayTeam.losses) * 3);
    const drawProb = Math.min(40, 20 + (homeTeam.draws + awayTeam.draws) * 1.5);
    const awayWinProb = Math.min(65, (awayTeam.wins - homeTeam.losses) * 3);
    
    // Normalize
    const total = homeWinProb + drawProb + awayWinProb;
    const normalizedHome = Math.round((homeWinProb / total) * 100);
    const normalizedDraw = Math.round((drawProb / total) * 100);
    const normalizedAway = Math.round((awayWinProb / total) * 100);
    
    // Determine outcome
    let result, probability;
    if (normalizedHome >= normalizedAway && normalizedHome >= normalizedDraw) {
        result = " ú·¥è·¥ç·¥á ·¥°…™…¥";
        probability = normalizedHome;
    } else if (normalizedAway >= normalizedHome && normalizedAway >= normalizedDraw) {
        result = "·¥Ä·¥°·¥Ä è ·¥°…™…¥";
        probability = normalizedAway;
    } else {
        result = "·¥Ö Ä·¥Ä·¥°";
        probability = normalizedDraw;
    }
    
    // Score prediction
    const homeAttack = (homeTeam.goalsFor / (homeTeam.wins + homeTeam.draws + homeTeam.losses)) || 1.4;
    const homeDefense = (homeTeam.goalsAgainst / (homeTeam.wins + homeTeam.draws + homeTeam.losses)) || 1.2;
    const awayAttack = (awayTeam.goalsFor / (awayTeam.wins + awayTeam.draws + awayTeam.losses)) || 1.3;
    const awayDefense = (awayTeam.goalsAgainst / (awayTeam.wins + awayTeam.draws + awayTeam.losses)) || 1.1;
    
    const homeGoals = Math.round((homeAttack + awayDefense) / 2 * (0.9 + Math.random() * 0.2));
    const awayGoals = Math.round((awayAttack + homeDefense) / 2 * (0.8 + Math.random() * 0.3));
    
    // Betting advice
    let advice;
    if (probability > 65) {
        advice = "s·¥Ä“ì·¥á  ô·¥á·¥õ, …¢·¥è·¥è·¥Ö ·¥è·¥Ö·¥Ös";
    } else if (probability > 50) {
        advice = "·¥°·¥è Ä·¥õ ú ·¥Ñ·¥è…¥s…™·¥Ö·¥á Ä…™…¥…¢";
    } else if (probability > 40) {
        advice = " Ä…™s·¥ã è  ô·¥ú·¥õ ·¥ò·¥èss…™ ô ü·¥á";
    } else {
        advice = " ô·¥á·¥õ·¥õ·¥á Ä ·¥õ·¥è ·¥Ä·¥†·¥è…™·¥Ö";
    }
    
    return {
        result,
        probability,
        score: `${Math.max(0, homeGoals)}-${Math.max(0, awayGoals)}`,
        advice
    };
}

// Utility functions
function formatDate(date) {
    return date.toISOString().split('T')[0];
}

function getCompetitionName(code) {
    const names = {
        'CL': 'Champions League',
        'BL1': 'Bundesliga',
        'FL1': 'Ligue 1',
        'PD': 'La Liga',
        'SA': 'Serie A',
        'PL': 'Premier League'
    };
    return names[code] || code;
}
